package Rest.Model.pojoExtended;

import Server.Application;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.hibernate.validator.constraints.Email;
import org.mindrot.jbcrypt.BCrypt;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.sql.Timestamp;
import java.util.Date;

@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.7.1"
        },
        comments = "This is a modified class generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "user", schema = "vvv")
public class User implements Serializable {
    private static final long serialVersionUID = 650727267;

    private static final Byte MANAGER    = 0;
    private static final Byte EMPLOYEE   = 1;
    private static final Byte PASSENGER  = 2;

    @JsonIgnore
    private Integer   id;

    @NotNull(message = "NOT_NULL")
    @Size(max = 255, message = "TOO_LONG")
    private String    firstName;

    @NotNull(message = "NOT_NULL")
    @Size(max = 255, message = "TOO_LONG")
    private String    lastName;

    @Email(message = "INVALID_EMAIL")
    private String    email;

    @JsonIgnore
    private byte[]    passwordHash;

    @JsonIgnore
    private Timestamp createdAt;

    @JsonIgnore
    private Timestamp updatedAt;

    @JsonIgnore
    private Byte      type;

    @NotNull(message = "NOT_NULL")
    @Size   (min = 6, message = "TOO_SHORT")
    private String password;

    private String typeKey;

    public User(){
        super();
        Timestamp now = new Timestamp((new Date()).getTime());
        this.setCreatedAt(now);
        this.setUpdatedAt(now);
        this.setType(PASSENGER);
    }

    public User(User value) {
        this.id = value.id;
        this.firstName = value.firstName;
        this.lastName = value.lastName;
        this.email = value.email;
        this.passwordHash = value.passwordHash;
        this.createdAt = value.createdAt;
        this.updatedAt = value.updatedAt;
        this.type = value.type;
        this.password = value.password;
        this.typeKey = value.typeKey;
    }

    public User(
            Integer   id,
            String    firstName,
            String    lastName,
            String    email,
            String    password,
            Timestamp createdAt,
            Timestamp updatedAt,
            Byte      type
    ) {
        this.password = password;
    }

    @Id
    @Column(name = "id", unique = true, nullable = false, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "first_name", nullable = false, length = 255)
    public String getFirstName() {
        return this.firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    @Column(name = "last_name", nullable = false, length = 255)
    public String getLastName() {
        return this.lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Column(name = "email", unique = true, nullable = false, length = 255)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "password_hash", length = 60)
    public byte[] getPasswordHash() {
        return this.passwordHash;
    }

    public void setPasswordHash(byte[] passwordHash) {
        this.passwordHash = passwordHash;
    }

    @Column(name = "created_at", nullable = false)
    public Timestamp getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Timestamp createdAt) {
        this.createdAt = createdAt;
    }

    @Column(name = "updated_at", nullable = false)
    public Timestamp getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Timestamp updatedAt) {
        this.updatedAt = updatedAt;
    }

    @Column(name = "type", nullable = false, precision = 3)
    public Byte getType() {
        return this.type;
    }

    public void setType(Byte type) {
        this.type = type;
    }

    public void setPassword(String password) {
        this.password = password;
        this.passwordHash  = BCrypt.hashpw(password, BCrypt.gensalt(12)).getBytes();
    }

    public void setTypeKey(String typeKey) {
        this.typeKey = typeKey;
    }

    public Boolean checkType(){
        if(this.typeKey != null) {
            try {
                if(BCrypt.checkpw(Application.EMPLOYEE_KEY, this.typeKey)){
                    this.type = EMPLOYEE;

                }else if(BCrypt.checkpw(Application.MANAGER_KEY, this.typeKey)){
                    this.type = MANAGER;

                }else{
                    return false;
                }
            }catch (IllegalArgumentException e){
                return false;
            }
        }

        return true;
    }

    public  Boolean checkPassword(String password) throws UnsupportedEncodingException {
        String passwordHashString = new String(this.passwordHash, "UTF-8");

        return BCrypt.checkpw(password, passwordHashString);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("User (");

        sb.append(id);
        sb.append(", ").append(firstName);
        sb.append(", ").append(lastName);
        sb.append(", ").append(email);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(type);

        sb.append(")");
        return sb.toString();
    }
}
