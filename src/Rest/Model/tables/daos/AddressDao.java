/**
 * This class is generated by jOOQ
 */
package Rest.Model.tables.daos;


import Rest.Model.tables.Address;
import Rest.Model.tables.records.AddressRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AddressDao extends DAOImpl<AddressRecord, Rest.Model.tables.pojos.Address, Integer> {

	/**
	 * Create a new AddressDao without any configuration
	 */
	public AddressDao() {
		super(Address.ADDRESS, Rest.Model.tables.pojos.Address.class);
	}

	/**
	 * Create a new AddressDao with an attached configuration
	 */
	public AddressDao(Configuration configuration) {
		super(Address.ADDRESS, Rest.Model.tables.pojos.Address.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected Integer getId(Rest.Model.tables.pojos.Address object) {
		return object.getId();
	}

	/**
	 * Fetch records that have <code>id IN (values)</code>
	 */
	public List<Rest.Model.tables.pojos.Address> fetchById(Integer... values) {
		return fetch(Address.ADDRESS.ID, values);
	}

	/**
	 * Fetch a unique record that has <code>id = value</code>
	 */
	public Rest.Model.tables.pojos.Address fetchOneById(Integer value) {
		return fetchOne(Address.ADDRESS.ID, value);
	}

	/**
	 * Fetch records that have <code>street IN (values)</code>
	 */
	public List<Rest.Model.tables.pojos.Address> fetchByStreet(String... values) {
		return fetch(Address.ADDRESS.STREET, values);
	}

	/**
	 * Fetch records that have <code>number IN (values)</code>
	 */
	public List<Rest.Model.tables.pojos.Address> fetchByNumber(Integer... values) {
		return fetch(Address.ADDRESS.NUMBER, values);
	}

	/**
	 * Fetch records that have <code>city IN (values)</code>
	 */
	public List<Rest.Model.tables.pojos.Address> fetchByCity(String... values) {
		return fetch(Address.ADDRESS.CITY, values);
	}

	/**
	 * Fetch records that have <code>state IN (values)</code>
	 */
	public List<Rest.Model.tables.pojos.Address> fetchByState(String... values) {
		return fetch(Address.ADDRESS.STATE, values);
	}

	/**
	 * Fetch records that have <code>country IN (values)</code>
	 */
	public List<Rest.Model.tables.pojos.Address> fetchByCountry(String... values) {
		return fetch(Address.ADDRESS.COUNTRY, values);
	}
}
