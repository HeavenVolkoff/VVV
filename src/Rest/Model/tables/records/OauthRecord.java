/**
 * This class is generated by jOOQ
 */
package Rest.Model.tables.records;


import Rest.Model.tables.Oauth;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "oAuth", schema = "vvv")
public class OauthRecord extends UpdatableRecordImpl<OauthRecord> implements Record3<byte[], Timestamp, Integer> {

	private static final long serialVersionUID = -2058709694;

	/**
	 * Setter for <code>vvv.oAuth.token</code>.
	 */
	public void setToken(byte[] value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>vvv.oAuth.token</code>.
	 */
	@Column(name = "token", nullable = false, length = 96)
	public byte[] getToken() {
		return (byte[]) getValue(0);
	}

	/**
	 * Setter for <code>vvv.oAuth.last_login_at</code>.
	 */
	public void setLastLoginAt(Timestamp value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>vvv.oAuth.last_login_at</code>.
	 */
	@Column(name = "last_login_at", nullable = false)
	public Timestamp getLastLoginAt() {
		return (Timestamp) getValue(1);
	}

	/**
	 * Setter for <code>vvv.oAuth.user_id</code>.
	 */
	public void setUserId(Integer value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>vvv.oAuth.user_id</code>.
	 */
	@Id
	@Column(name = "user_id", unique = true, nullable = false, precision = 10)
	public Integer getUserId() {
		return (Integer) getValue(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<byte[], Timestamp, Integer> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<byte[], Timestamp, Integer> valuesRow() {
		return (Row3) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<byte[]> field1() {
		return Oauth.OAUTH.TOKEN;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field2() {
		return Oauth.OAUTH.LAST_LOGIN_AT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field3() {
		return Oauth.OAUTH.USER_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public byte[] value1() {
		return getToken();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value2() {
		return getLastLoginAt();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value3() {
		return getUserId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OauthRecord value1(byte[] value) {
		setToken(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OauthRecord value2(Timestamp value) {
		setLastLoginAt(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OauthRecord value3(Integer value) {
		setUserId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OauthRecord values(byte[] value1, Timestamp value2, Integer value3) {
		value1(value1);
		value2(value2);
		value3(value3);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached OauthRecord
	 */
	public OauthRecord() {
		super(Oauth.OAUTH);
	}

	/**
	 * Create a detached, initialised OauthRecord
	 */
	public OauthRecord(byte[] token, Timestamp lastLoginAt, Integer userId) {
		super(Oauth.OAUTH);

		setValue(0, token);
		setValue(1, lastLoginAt);
		setValue(2, userId);
	}
}
