/**
 * This class is generated by jOOQ
 */
package Rest.Model.tables.records;


import Rest.Model.tables.Address;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * User Address
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "Address", schema = "vvv")
public class AddressRecord extends UpdatableRecordImpl<AddressRecord> implements Record7<Integer, Integer, String, Integer, String, String, String> {

	private static final long serialVersionUID = 744757975;

	/**
	 * Setter for <code>vvv.Address.id</code>.
	 */
	public void setId(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>vvv.Address.id</code>.
	 */
	@Id
	@Column(name = "id", unique = true, nullable = false, precision = 10)
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>vvv.Address.user_id</code>.
	 */
	public void setUserId(Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>vvv.Address.user_id</code>.
	 */
	@Column(name = "user_id", precision = 10)
	public Integer getUserId() {
		return (Integer) getValue(1);
	}

	/**
	 * Setter for <code>vvv.Address.street</code>.
	 */
	public void setStreet(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>vvv.Address.street</code>.
	 */
	@Column(name = "street", nullable = false, length = 255)
	public String getStreet() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>vvv.Address.number</code>.
	 */
	public void setNumber(Integer value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>vvv.Address.number</code>.
	 */
	@Column(name = "number", precision = 10)
	public Integer getNumber() {
		return (Integer) getValue(3);
	}

	/**
	 * Setter for <code>vvv.Address.complement</code>.
	 */
	public void setComplement(String value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>vvv.Address.complement</code>.
	 */
	@Column(name = "complement", length = 255)
	public String getComplement() {
		return (String) getValue(4);
	}

	/**
	 * Setter for <code>vvv.Address.city</code>.
	 */
	public void setCity(String value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>vvv.Address.city</code>.
	 */
	@Column(name = "city", nullable = false, length = 255)
	public String getCity() {
		return (String) getValue(5);
	}

	/**
	 * Setter for <code>vvv.Address.state</code>.
	 */
	public void setState(String value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>vvv.Address.state</code>.
	 */
	@Column(name = "state", nullable = false, length = 255)
	public String getState() {
		return (String) getValue(6);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record7 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row7<Integer, Integer, String, Integer, String, String, String> fieldsRow() {
		return (Row7) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row7<Integer, Integer, String, Integer, String, String, String> valuesRow() {
		return (Row7) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Address.ADDRESS.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return Address.ADDRESS.USER_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return Address.ADDRESS.STREET;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field4() {
		return Address.ADDRESS.NUMBER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field5() {
		return Address.ADDRESS.COMPLEMENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field6() {
		return Address.ADDRESS.CITY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field7() {
		return Address.ADDRESS.STATE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getUserId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getStreet();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value4() {
		return getNumber();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value5() {
		return getComplement();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value6() {
		return getCity();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value7() {
		return getState();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AddressRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AddressRecord value2(Integer value) {
		setUserId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AddressRecord value3(String value) {
		setStreet(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AddressRecord value4(Integer value) {
		setNumber(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AddressRecord value5(String value) {
		setComplement(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AddressRecord value6(String value) {
		setCity(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AddressRecord value7(String value) {
		setState(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AddressRecord values(Integer value1, Integer value2, String value3, Integer value4, String value5, String value6, String value7) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		value7(value7);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached AddressRecord
	 */
	public AddressRecord() {
		super(Address.ADDRESS);
	}

	/**
	 * Create a detached, initialised AddressRecord
	 */
	public AddressRecord(Integer id, Integer userId, String street, Integer number, String complement, String city, String state) {
		super(Address.ADDRESS);

		setValue(0, id);
		setValue(1, userId);
		setValue(2, street);
		setValue(3, number);
		setValue(4, complement);
		setValue(5, city);
		setValue(6, state);
	}
}
